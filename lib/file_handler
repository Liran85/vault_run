#!/usr/bin/env bash

function log() {
  local msg=$1
  local timestamp=$(date +"%T")
  local funcName=${FUNCNAME[*]}
  echo "[VAULT]:[$timestamp]:[$funcName]:$msg"
}

function getPass()
{
  echo "Enter your paswword"
  read -s vaultpass
}
function encrypt() {
  #openssl aes-256-cbc -a -salt -in $filename -out $filename.enc 2>/dev/null
  openssl enc -aes-256-cbc -salt -in $filename -out $filename.enc -k vaultpass
  retVal=$?
  if [ $retVal -eq 0 ]; then
    rm $filename
    echo "encrypted file successfully"
  fi

}

function decryptPASS() {
  openssl enc -aes-256-cbc -d -in "${filename}.enc" -out $filename -k vaultpass
  #openssl aes-256-cbc -d -a -in "${filename}.enc" -out $filename 2>/dev/null
  #openssl genrsa -aes256 -out ca.key.pem -passout pass:abcd 4096
  rm $filename.enc

}

function sealVault() {
  log "in seal function"
  encrypt

}

function unsealVault() {
  log "in unseal function"
  decrypt
}

function addData() {
  local incomeValue=${1-}
  unsealVault
  # check if Data section is exist
  grep -Fxq "[Data]" $filename 
  retVal=$?
  if [ $retVal -eq 0 ]; then
    keys=("${keys[@]}" "income=" )
    echo ${keys[5]} >>$filename
    sed -i "/^income=/s/=.*/=$incomeValue/" $filename
    else
    echo "Data section not exist"
    exit 1
  fi
  #sealVault
 
}

 # create backup file /tmp libary in unseal mode
function backupVault() {
  echo $filename
  local backup_dir="/tmp"
  cp $filename $backup_dir/$filename.$(date +"%Y%m%d")
}
